---
title: Manufacturer Usage Description Specification
abbrev: MUD YANG Model
docname: draft-lear-ietf-netmod-mud-02
category: std

ipr: trust200902
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: E. Lear
    name: Eliot Lear
    org: Cisco Systems
    street: Richtistrasse 7
    code: CH-8304
    city: Wallisellen
    country: Switzerland
    phone: +41 44 878 9200
    email: lear@cisco.com
 -
    ins: R. Droms
    name: Ralph Droms
    org: Cisco Systems
    street: 55 Cambridge Parkway
    city: Cambridge
    state: MA
    code: 02041
    country: United States
    phone: +1 617 621 1904
    email: rdroms@cisco.com

normative:
   RFC2119:
   RFC3986:
   RFC6020:
   I-D.ietf-netmod-acl-model:
   I-D.ietf-anima-bootstrapping-keyinfra:
   RFC2818:
   RFC6991:
   RFC2131:
   RFC3315:
   RFC7227:
   RFC5280:
   RFC5652:
   RFC6092:
   RFC7299:

informative:
   I-D.lear-mud-framework:
   IEEE8021AR:
      title: Secure Device Identity
      author:
        organization: Institute for Electrical and Electronics Engineers
      seriesInfo:
        name: IEEE
        value: 802.1AR
      date: 1998

--- abstract

This memo specifies the necessary components to implement manufacturer
usage descriptions (MUD). This includes two YANG modules, IPv4 and IPv6
DHCP options, a URL suffix specification, an X.509 certificate
extension and a means to sign and verify the descriptions.

--- middle

Introduction 
============

Manufacturer Usage Descriptions (MUDs) provide advice to end networks
on how to treat specific classes of devices.  The MUD architecture is
explained in {{I-D.lear-mud-framework}}.  The files that are retrieved
are intended to be closely aligned to existing network architectures
so that they are easy to deploy.  We make use of YANG {{RFC6020}}
because of the time and effort spent to develop accurate and adequate
models for use by network devices.  JSON is used as a serialization
for compactness and readability.

The YANG modules specified here are extensions of
{{I-D.ietf-netmod-acl-model}}.  The extensions to this model allow for
a manufacturer to express classes of systems that a manufacturer would
find necessary for the proper function of the device.  Two modules are
specified. The first module specifies a means for domain names to be
used in ACLs so that devices that have their controllers in the cloud
may be appropriately authorized with domain names, where the mapping
of those names to addresses may rapidly change.

The second module abstracts away IP addresses into certain classes
that are instantiated into actual IP addresses through local
processing.  Through these classes, manufacturers can specify how the
device is designed to communicate, so that network elements can be
configured by local systems that have local topological knowledge.
That is, the deployment populates the classes that the manufacturer
specifies.

In this memo two means are defined to emit the MUD URL.  One is a
DHCP option{{RFC2131}},{{RFC3315}} that the DHCP client uses to inform
the DHCP server.  The DHCP server may take further actions, such as
retrieve the URL or otherwise pass it along to network management
system or controller.

The other method defined is an X.509 constraint.  The IEEE has
developed {{IEEE8021AR}} that provides a certificate-based approach to
communicate device characteristics, which itself relies on
{{RFC5280}}.  The MUD URL extension is non-critical, as required by
IEEE 802.1AR.

Because manufacturers do not know who will be using their devices, it
is important for functionality referenced in usage descriptions to be
relatively ubiquitous, and therefore, mature.  Therefore, only a
limited subset of NETCONF-like content is permitted.

Terminology
-----------

MUD:
: manufacturer usage description.

MUD file:
: a file containing YANG-based JSON that describes a recommended behavior.

MUD file server:
: a web server that hosts a MUD file.

MUD controller:
: the system that requests and receives the MUD file from the MUD
server.  After it has processed a MUD file it may direct changes to
relevant network elements. 

MUD URL:
: a URL that can be used by the MUD controller to receive the MUD file.


The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
{{RFC2119}}.



The MUD Model and Semantic Meaning
==================================
A MUD file consists of JSON based on a YANG model.  For purposes of
MUD, the elements that can be modified are access lists as augmented
by this model.  The MUD file is limited to the serialization of a
small number of YANG schema, including the models specified in the
following documents:

 * {{I-D.ietf-netmod-acl-model}}
 * {{RFC6991}} 

Publishers of MUD files MUST NOT include other elements except as
described in {{extensions}}, and MUST only contain information
relevant to the device being described.  Devices parsing MUD files
MUST cease processing if they find other elements.

This module is structured into three parts.  The first container holds
information that is relevant to retrieval and validity of the MUD file
itself.  The second container augments the access list to indicate
direction the ACL is to be applied.  The final container augments the
matching container of the ACL model to add several elements that are
relevant to the MUD URL, or other otherwise abstracted for use within
a local environment.


~~~~~~~~~~~~~~~~~
  module: ietf-mud
    +--rw meta-information
        +--rw last-update?         yang:date-and-time
        +--rw previous-mud-file?   yang:uri
        +--rw cache-validity?      uint32
        +--rw masa-server?         inet:uri
        +--rw is-supported?        boolean
  augment /acl:access-lists/acl:acl:
     +--rw packet-direction?   direction
  augment /acl:access-lists/acl:acl
          /acl:access-list-entries/acl:ace/acl:matches:
     +--rw manufacturer?          inet:host
     +--rw same-manufacturer?     empty
     +--rw model?                 string
     +--rw local-networks?        empty
     +--rw controller?            inet:uri
     +--rw direction-initiated?   direction
~~~~~~~~~~~~~~~~~

Element Definitions
===================

The following elements are defined.

last-update
-----------
This is a date-and-time value of the last time the MUD file was
updated.  This is akin to a version number.

previous-mud-file
-----------------
This is a URL that should point to the previous MUD URL for
auditing purposes.  Because it should not be necessary to resign a MUD
file when a new one is released, the archival location of a current
MUD file should be identified prior to its release.  Note the
signature file MUST also be available.  For example, if
previous-mud-file is set to "https://example.com/.mud/v1/xxx", the
corresponding signature would be found at
"https://example.com/.mud/v1/xxx.p7s".

cache-validity
--------------
This uint32 is the period of time in hours that a network management
station MUST wait since its last retrieval before checking for an
update.  It is RECOMMENDED that this value be no less than 24 and no
more than 1440 for any device that is supported.

masa-server
-----------
This optional element refers to the URL that should be used to
resolve the location any MASA service, as specified in
{{I-D.ietf-anima-bootstrapping-keyinfra}}.

is-supported
-----------
This boolean is an indication from the manufacturer to the network
administrator as to whether or not the device is supported.  In this
context a device is said to be supported if the manufacturer might
issue an update to the device or if the manufacturer might update the
MUD file.

packet-direction
---------
{{I-D.ietf-netmod-acl-model}} describes access-lists but does not
attempt to indicate where they are applied as that is handled
elsewhere in a configuration.  However, in this case, a MUD
file must be explicit in describing the communcation pattern of a
device, and that includes indicating what is to be permitted or denied
in either direction of communication.  This element takes a single
value of either "to-device" or "from-device", based on a typedef
"direction".


manufacturer
------------
This element consists of a hostname that would be matched against the
authority section of another device's MUD URL.

same-manufacturer
----------------
This is an equivalent for when the manufacturer element is used
to indicate the authority that is found in another device's MUD URL
matches that of the authority found in this device's MUD URL.

model
-----
This string matches the one and only segment following the
authority section of the MUD URL.  It refers to a model that is unique
within the context of the authority.  It may also include product
version information.  Thus how this field is constructed is entirely a
local matter for the manufacturer.

local-networks
-------------
This null-valued element expands to include local networks.  Its
default expansion is that packets must not traverse toward a default
route that is received from the router.

controller
----------
This URI specifies a value that a controller will register with the
network management station.  The element then is expanded to the set
of hosts that are so registered.

In addition, some meta information is defined in order to determine
when a usage description should be refreshed.

direction-initiated
-------------------
When applied this matches packets when the flow was initiated in the
corresponding direction.  {{RFC6092}} provides guidance for IPv6 guidance
best practices.  While that document is scoped specifically to IPv6,
its contents are applicable for IPv4 as well.  When this flag is set,
and the system has no reason to believe a flow has been initiated it
MUST drop the packet.  This match SHOULD be applied with specific
transport parameters, such as protocol.

Processing of the MUD file
==========================
To keep things relatively simple in addition to whatever definitions
exist, we also apply two additional default behaviors:

 * Anything not explicitly permitted is denied.
 * Local DNS, DHCP, and NTP are, by default, permitted to and from the device.

What does a MUD URL look like? {#mudurl}
==============================

To begin with, MUD takes full advantage of both the https: scheme and
the use of .well-known.  HTTPS is important in this case because men
in the middle could otherwise harm the operation of a class of
devices.  .well-known is used because we wish to add additional
structure to the URL.  And so the URL appears as follows:

~~~~~~~~~~

   mud-url   = "https://" authority  "/.well-known/mud/" mud-rev
               "/" model ( "?" extras )
               ; authority is from RFC3986
   mud-rev   = "v1"
   model     = segment  ; from RFC3986
   extras    = query    ; from RFC3986
   
~~~~~~~~~~

mud-rev signifies the version of the manufacturer usage description
file.  This memo specifies "v1" of that file.  Later versions may
permit additional schemas or modify the format.

"model" represents a device model as the manufacturer wishes to
represent it.  It could be a brand name or something more specific.
It also may provide a means to indicate what version the product is.
Specifically if it has been updated in the field, this is the place
where evidence of that update would appear.  The field should be
changed when the intended communication patterns of a device change.
While from a controller standpoint, only comparison and matching
operations are safe, it is envisioned that updates will require some
administrative review.  Processing of this URL occurs as specified in
{{RFC2818}} and {{RFC3986}}.

The MUD YANG Model
==================

~~~~~~~~~~
<CODE BEGINS>file "ietf-mud@2016-07-20.yang";

module ietf-mud {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-mud";
  prefix "ietf-mud";
  
  import ietf-access-control-list {
    prefix "acl";
  }

  import ietf-yang-types {
    prefix "yang";
  }
  
  import ietf-inet-types {
    prefix "inet";
  }
  
  organization
    "IETF OPSAWG (Ops Area) Working Group";

  contact
       "WG Web: http://tools.ietf.org/wg/opsawg/
       WG List: opsawg@ietf.org
       WG Chair: Warren Kumari
       warren@kumari.net
       WG Chair: Zhou Tianran
       zhoutianran@huawei.com
       Editor: Eliot Lear
       lear@cisco.com
       Editor: Ralph Droms
       rdroms@cisco.com
    ";

  description
    "This YANG module defines a component that augments the
     IETF description of an access list.  This specific module
     focuses on additional filters that include local, model,
     and same-manufacturer.

    Copyright (c) 2016 IETF Trust and the persons identified as
    the document authors.  All rights reserved.
    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD
    License set forth in Section 4.c of the IETF Trust's Legal
    Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info).
    This version of this YANG module is part of RFC XXXX; see
    the RFC itself for full legal notices.";

  revision "2016-07-20"  {
    description "Base version of MUD extensions to ACL model";
    reference "RFC XXXX: Manufacturer Usage Description Specification";
  }

  typedef direction {
     type enumeration {
         enum to-device {
           description "packets or flows destined to the target device";
         }
         enum from-device {
           description "packets or flows destined from
                        the target device";
           }
         }
     description "Which way are we talking about?";
  }

  container meta-information {
    
    description "Information about when support end(ed), and
                 when to refresh";
    
    leaf last-update {
      type yang:date-and-time;
      description "This is intended to be the time and date that
                   the MUD file was generated.";
    }

    leaf previous-mud-file {
       type inet:uri;
       description "Use to find the previous MUD file location
                    for auditing purposes.";
    }

    leaf cache-validity {
      type uint32;
      description "The information retrieved from the MUD server is
                 valid for these many hours, after which it should
                 be refreshed.";
    }

    leaf masa-server {
      type inet:uri;
      description "The URI of the MASA server that network
      elements should forward requests to for this device.";
    }      

    leaf is-supported {
      type boolean;
      description "The element is currently supported
                   by the manufacturer.";
    }
  }
  
  augment "/acl:access-lists/acl:acl"   {
    description "add inbound or outbound.  Normally access lists
                 are applied in an inbound or outbound direction
                 separately from their definition.  This is not
                 possible with MUD.";
    leaf packet-direction 
    {
      type direction;
      description "inbound or outbound ACL.";
    }
  }
  
    
  augment "/acl:access-lists/acl:acl/" +
     "acl:access-list-entries/acl:ace/" +
     "acl:matches" {
    description "adding abstractions to avoid need of IP addresses";

    leaf manufacturer {
      type inet:host;
      description "authority component of the manufacturer URI";
    }

    leaf same-manufacturer {
      type empty;
      description "expand to ACEs for each device
                   with the same origin";
    }

    leaf model {
        type string;
        description "specific model (including version) for a
                     given manufacturer";
    }

    leaf local-networks {
      type empty;
      description "this string is used to indicate networks
                   considered local in a given environment.";
    }
    leaf controller {
      type inet:uri;
      description "expands to one or more controllers for a
                   given service that is codified by inet:uri.";
    }              
    leaf direction-initiated {
      type direction;
      description "which direction a flow was initiated";
    }
  }
} 

<CODE ENDS>
~~~~~~~~~~


The Domain Name Extension to the ACL Model
==========================================
This module specifies an extension to IETF-ACL model such that domain
names may be referenced by augmenting the "matches" element.
Different implementations may deploy differing methods to maintain the
mapping between IP address and domain name, if indeed any are needed.
However, the intent is that resources that are referred to using a
name should be authorized (or not) within an access list.

The structure of the change is as follows:

~~~~~~~~~~~~~~~~~
   augment
   /acl:access-lists/acl:acl/acl:access-list-entries
      /acl:ace/acl:matches/acl:ace-type/acl:ace-ip:
      +--rw src-dnsname?        inet:host
      +--rw dst-dnsname?        inet:host
~~~~~~~~~~~~~~~~~

The choice of this particular point in the access-list model is based
on the assumption that we are in some way referring to IP-related
resources, as that is what the DNS returns.  A domain name in our
context is defined in {{RFC6991}}.

The following elements are defined.

source-dnsname
--------------
The argument corresponds to a domain name of a source as specified by
inet:host. Depending on how the model is used, it may or may not be
resolved, as required by the implementation and circumstances.

destination-dnsname
------------------- 
The argument corresponds to a domain name of a destination as
specified by inet:host. Depending on how the model is used, it may or
may not be resolved, as required by the implementation and
circumstances.


The ietf-acldns Model
--------------------------
~~~~~~~~~~
<CODE BEGINS>file "ietf-acldns@2007-07020.yang";

module ietf-acldns {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-acldns";
  prefix "ietf-acldns";
  
  import ietf-access-control-list {
    prefix "acl";
  }

  import ietf-inet-types {
    prefix "inet";
  }
  
  organization
    "IETF OPSAWG (Ops Area) Working Group";

  contact
       "WG Web: http://tools.ietf.org/wg/opsawg/
       WG List: opsawg@ietf.org
       WG Chair: Warren Kumari
       warren@kumari.net
       WG Chair: Zhou Tianran
       zhoutianran@huawei.com
       Editor: Eliot Lear
       lear@cisco.com
       Editor: Ralph Droms
       rdroms@cisco.com
    ";


  description
    "This YANG module defines a component that augments the
     IETF description of an access list to allow dns names
     as matching criteria.";

  revision "2016-07-20" {
    description "Base version of dnsname extension of ACL model";
    reference "RFC XXXX: Manufacturer Usage Description Specification";
  }

  augment "/acl:access-lists/acl:acl/" +
     "acl:access-list-entries/acl:ace/" +
     "acl:matches/acl:ace-type/acl:ace-ip" {
    description "adding domain names to matching";

    leaf src-dnsname {
      type inet:host;
      description "domain name to be matched against";
    }
    leaf dst-dnsname {
      type inet:host;
      description "domain name to be matched against";
    }
  }
}

<CODE ENDS>
~~~~~~~~~~

MUD File Example
================
This example contains two access lists that are intended to provide
outbound access to a cloud service on TCP port 443.

~~~~~~~
{
   "ietf-mud:support-information": {
      "last-update": "2016-05-18T20:00:50Z",
      "cache-validity": 1440
      },
   "ietf-access-control-list:access-lists":  {
     "acl": [ {
      "acl-name": "inbound-stuff",
      "acl-type" : "ipv4-acl",
      "ietf-mud:direction" : "to-device",
      "access-list-entries": {
         "ace": [
            {
               "rule-name": "access-cloud",
               "matches": {
                 "ietf-acldns:src-dnsname":
                     "lighting-system.example.com",
                  "protocol" : 8,
                  "source-port-range" : {
                     "lower-port" : 443,
                     "upper-port" : 443
                     }
                  },
               "actions" : {
                 "permit" : [null]
                 }
              }
            ]
           }
         },
         {
      "acl-name": "outbound-stuff",
      "acl-type" : "ipv4-acl",
      "ietf-mud:direction" : "from-device",
      "access-list-entries": {
         "ace": [
            {
               "rule-name": "access-cloud",
               "matches": {
                  "ietf-acldns:dst-dnsname":
                       "lighting-system.example.com",
                   "protocol" : 8,
                   "destination-port-range" : {
                     "lower-port" : 443,
                     "upper-port" : 443
                    }
                },
               "actions" : {
                   "permit" : [null]
                 }
              }
            ]
           }
         }
        ]
    }
}

~~~~~~~


The MUD URL DHCP Option {#dhcpopt}
=======================

The IPv4 MUD URL client option has the following format:

~~~~~~~~~~
  +------+-----+------------------------------
  | code | len |  MUD URL
  +------+-----+------------------------------

~~~~~~~~~~


Code OPTION_MUD_URL_V4 (TBD) is assigned by IANA.  len is a single
octet that indicates the length of the URL in octets.  MUD URL is a
URL.  The length of a MUD URL does not exceed 255 bytes.

The IPv6 MUD URL client option has the following format:

~~~~~~~~~~

   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |         OPTION_MUD_URL_V6     |        option-length          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                            MUD URL                            |
  |                              ...                              |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

~~~~~~~~~~

OPTION_MUD_URL_V6 (TBD; assigned by IANA).

option-length contains the length of the URL in octets.  The length
MUST NOT exceed 255 octets.

The intent of this option is to provide both a new device classifier
to the network as well as some recommended configuration to the
routers that implement policy.  However, it is entirely the purview of
the network system as managed by the network administrator to decide
what to do with this information.  The key function of this option is
simply to identify the type of device to the network in a structured
way such that the policy can be easily found with existing toolsets.


Client Behavior
---------------
A DHCP client MAY emit either a DHCPv4 or DHCPv6 option or both.
These options singletons, as specified in {{RFC7227}}.  Because clients are
intended to have at most one MUD URL associated with them, they may
emit at most one MUD URL option via DHCPv4 and one MUD URL option via
DHCPv6. In the case where both v4 and v6 DHCP options are emitted,
the same URL MUST be used.

Clients SHOULD log or otherwise report improper acknowledgments from
servers, but they MUST NOT modify their MUD URL configuration based on
a server's response.  The server's response is only an acknowledgment
that the server has processed the option, and promises no specific
network behavior to the client.  In particular, it may not be possible
for the server to retrieve the file associated with the MUD URL,
or the local network administration may not wish to use the usage
description.  Neither of these situations should be considered in any
way exceptional.

Server Behavior
---------------
A DHCP server may ignore these options or take action based on receipt
of these options.  For purposes of debugging, if a server successfully
parses the option and the URL, it MUST return the option with the same
URL as an acknowledgment.  Even in this circumstance, no specific
network behavior is guaranteed.  When a server consumes this option,
it will either forward the URL and relevant client information to a
network management system (such as the giaddr), or it will retrieve
the usage description by resolving the URL.

DHCP servers may implement MUD functionality themselves or they may
pass along appropriate information to a network management system or
controller.  A DHCP server that does process the MUD URL MUST adhere to
the process specified in {{RFC2818}} and {{RFC5280}} to validate the
TLS certificate of the web server hosting the MUD file.  Those servers
will retrieve the file, process it, create and install the necessary
configuration on the relevant network element.  Servers SHOULD monitor the
gateway for state changes on a given interface.  A DHCP server that
does not provide MUD functionality and has forwarded a MUD URL to a
network management system MUST notify the network management of any
corresponding change to the DHCP state of the client (such as
expiration or explicit release of a network address lease).

Relay Requirements
------------------
There are no additional requirements for relays.

The Manufacturer Usage Description (MUD) URL X.509 Extension {#mudx509}
=======================================================================

{{RFC7299}} provides a procedure and means to specify extensions to
X.509 certificates.  The MUD URL is a non-critical Certificate
extension that points to an on-line Manufacturer Usage Description
concerning the certificate subject.  This extension contains a single
Uniform Resource Identifier (URI).  Internationalized Resource
Identifiers must be represented as URI's in the way described in RFC
5280, section 7.4.

The choice of id-pe is based on guidance found in Section 4.2.2 of
{{RFC5280}}:

~~~~~
   These extensions may be used to direct applications to on-line
   information about the issuer or the subject.
~~~~~

The MUD URL is precisely that: online information about the particular
subject.

The new extension is identified as follows:

  -- The MUD URI extension
  id-pe-mud-url   OBJECT IDENTIFER ::= { id-pe TBD }


The extension returns a single value:

  mudURLSyntax ::= IA5String -- for use with mud architecture.

The semantics of the URI are defined {{mudurl}}.

The Manufacturer Usage Description LLDP extension
=================================================

TBD

Creating and Processing of Signed MUD Files
===========================================
Because MUD files contain information that may be used to configure
network access lists, they are sensitive.  To insure that they have
not been tampered with, it is important that they be signed.  We make
use of DER-encoded Cryptographic Message Syntax (CMS) {{RFC5652}} for
this purpose.

Creating a MUD file signature
-----------------------------
A MUD file MUST be signed using CMS as an opaque binary object.  In
order to make successful verification more likely, intermediate
certificates SHOULD be included.  If the device that is being
described supports IEEE 802.1AR, its manufacturer certificate and the
certificate in the MUD file MUST share a common trust anchor in
order to insure that manufacturer of the device is also the provider
of the MUD file.  The signature is stored at the same location as the
MUD URL but with the suffix of ".p7s".  Signatures are transferred
using content-type "Application/pkcs7-signature".

For example:

~~~~~~~~~~
% openssl cms -sign -signer mancertfile -inkey mankey \
              -in mudfile -binary -outform DER - \
              -certfile intermediatecert -out mudfile.p7s
~~~~~~~~~~
          
Note: A MUD file may need to be resigned if the signature expires.

Verifying a MUD file signature
------------------------------

Prior to retrieving a MUD file the MUD controller SHOULD retrieve the
MUD signature file using the MUD URL with a suffix of ".p7s".  For
example, if the MUD URL is
"https://example.com/.well-known/v1/modela", the MUD signature URL
will be "https://example.com/.well-known/v1/modela.p7s".

Upon retrieving a MUD file, a MUD controller MUST validate the
signature of the file before continuing with further processing.  A
MUD controller SHOULD produce an error and it MUST cease all
processing of that file if the signature cannot be validated.  If the
MUD controller has received the MUD URL via IEEE 802.1AR containing an
IDevID (a manufacturer certificate), it MUST further confirm that the
manufacturer certificate and that of the MUD file share a common trust
anchor.

For Example:

~~~~~~~~~~
% openssl cms -verify -in mudfile.p7s -inform DER -content mudfile
~~~~~~~~~~

Note the additional step of verifying the common trust root.

Extensibility {#extensions}
===========================

One of our design goals is to see that MUD files are able to be
understood by as broad a cross-section of systems as is possible.
Coupled with the fact that we have also chosen to leverage existing
mechanisms, we are left with no ability to negotiate extensions and a
limited desire for those extensions in any event.  A such, a
two-teir extensibility framework is employed, as follows:

 1. At a coarse grain, a protocol version is included in a MUD URL.
 This memo specifies MUD version 1.  Any and all changes are
 entertained when this version is bumped.  Transition approaches
 between versions would be a matter for discussion in future versions.

 2. At a finer grain, only extensions that would not incur additional
 risk to the device are permitted.  Specifically, augmenting of the
 meta-information container is permitted with the understanding that
 such additions may be ignored.  In addition, augmentation of the ACL
 model is permitted so long as it remains safe for a given ACE to be
 ignored by the MUD Controller or the network elements it configures.
 Most specifically, is is not permitted to include as an augmentation
 that modifies "deny" behavior without bumping the version.
 Furthermore, implementations that are not able to parse a component
 of the ACE array MUST ignore the entire array entry (e.g., not the
 entire array) and MAY ignore the entire MUD file.
 

Security Considerations {#secon}
=================================
Based on the means a URL is procured, a device may be able to lie
about what it is, thus gaining additional network access.  There are
several means to limit risk in this case.  The most obvious is to only
believe devices that make use of certificate-based authentication such
as IEEE 802.1AR certificates.  When
those certificates are not present, devices claiming to be of a
certain manufacturer SHOULD NOT be included in that manufacturer
grouping without additional validation of some form.  This will
occur when it makes use of primitives such as "manufacturer" for the
purpose of accessing devices of a particular type.

Network management systems SHOULD NOT deploy a usage description for a
a device with the same MAC address that has indicated a change of
authority without some additional validation (such as review of the
class).  New devices that present some form of unauthenticated MUD URL
SHOULD be validated by some external means when they would be
otherwise be given increased network access.

It may be possible for a rogue manufacturer to inappropriately
exercise the MUD file parser, in order to exploit a vulnerability.
There are three recommended approaches to address this threat.  The
first is to validate the signature of the MUD file.  The second is to
have a system do a primary scan of the file to ensure that it is both
parseable and believable at some level.  MUD files will likely be
relatively small, to start with.  The number of ACEs used by any given
device should be relatively small as well.  Second, it may be useful
to limit retrieval of MUD URLs to only those sites that are known to
have decent web reputations.

Use of a URL necessitates the use of domain names.  If a domain name
changes ownership, the new owner of that domain may be able to provide
MUD files that MUD controllers would consider valid.  There are a few
approaches that can mitigate this attack.  First, MUD file servers
SHOULD cache certificates used by the MUD file server.  When a new
certificate is retrieved for whatever reason, the MUD controller
should check to see if ownership of the domain has changed.  A fair
programmatic approximation of this is when the name servers for the
domain have changed.  If the actual MUD file has changed, the
controller MAY check the WHOIS database to see if registration
ownership of a domain has changed.  If a change has occured, or if for
some reason it is not possible to determine whether ownership has
changed, further review may be warranted.  Note, this remediation does
not take into account the case of a device that was produced long ago
and only recently fielded, or the case where a new MUD controller has
been installed.

IANA Considerations
===================

DHCPv4 and DHCPv6 Options
-------------------------

IANA is requested to allocated the DHCPv4 and v6 options as specified
in {{dhcpopt}}.

PKIX Extensions
---------------

The IANA is requested to assign a value for id-pe-mud-uri in the "SMI
Security for PKIX Certificate Extension" Registry.  Its use is
specified in {{mudx509}}.


Well Known URI Suffix
---------------------

The IANA is requested to register the URL suffix of "mud" as follows:

 o URI Suffix: "mud"
 o Specification documents: this document
 o Related information: n/a


MIME Media-type Registration for MUD files
------------------------------------------

The following media-type is defined for transfer of MUD file:

~~~~~~~~~~
 o Type name: application
 o Subtype name: mud+json
 o Required parameters: n/a
 o Optional parameters: n/a
 o Encoding considerations: 8bit; application/mud+json values
   are represented as a JSON object; UTF-8 encoding SHOULD be
   employed.
 o Security considerations: See {{secon}} of this document.
 o Interoperability considerations: n/a
 o Published specification: this document
 o Applications that use this media type: MUD controllers as
   specified by this document.
 o Fragment identifier considerations: n/a
 o Additional information:

     Magic number(s): n/a
     File extension(s): n/a
     Macintosh file type code(s): n/a

 o Person & email address to contact for further information:
   Eliot Lear <lear@cisco.com>, Ralph Droms <rdroms@cisco.com>
 o Intended usage: COMMON
 o Restrictions on usage: none

 o Author: Eliot Lear <lear@cisco.com>, Ralph Droms <rdroms@cisco.com>
 o Change controller: IESG
 o Provisional registration? (standards tree only): No.

~~~~~~~~~~

Acknowledgments
===============

The authors would like to thank Einar Nilsen-Nygaard, Bernie Volz, Tom
Gindin, Brian Weis, Dan Romascanu, Sandeep Kumar, Thorsten Dahm, John
Bashinski, Steve Rich, Jim Bieda, and Dan Wing for their valuable
advice and reviews.  The remaining errors in this work are entirely
the responsibility of the author.

--- back

Changes from Earlier Versions
=============================

RFC Editor to remove this section prior to publication.

Draft -01 to -02:
 * incorporate domain name model.
 * discuss extensibility.
 * leave placeholder for LLDP TLV.

Draft -00 to -01:

 * XML->JSON
 * Remove device versioning information from URL
 * Add PKIX and DHCP options
 * Add Content-type information
 * Clean up IANA considerations to match registration templates
 * Ralph Droms carried over as author from DHCP option.
 * Signing information
 * Expanded Security Considerations
 * Add directionality for both packets and flows.
 * add previous-mud-file
